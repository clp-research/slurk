{
  "paths": {
    "/slurk/api/layouts": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "title",
            "required": false,
            "description": "Filter for a layout title",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "in": "query",
            "name": "subtitle",
            "required": false,
            "description": "Filter for a layout subtitle",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "in": "query",
            "name": "show_users",
            "required": false,
            "description": "Filter for a user list being shown",
            "schema": {
              "type": "boolean",
              "nullable": true
            }
          },
          {
            "in": "query",
            "name": "show_latency",
            "required": false,
            "description": "Filter for latency being shown",
            "schema": {
              "type": "boolean",
              "nullable": true
            }
          },
          {
            "in": "query",
            "name": "read_only",
            "required": false,
            "description": "Filter for the layout being read-only",
            "schema": {
              "type": "boolean",
              "nullable": true
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Tag to check against",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "415": {
            "$ref": "#/components/responses/UNSUPPORTED_MEDIA_TYPE"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LayoutResponse"
                  }
                }
              }
            },
            "headers": {
              "ETag": {
                "description": "Tag for the returned entry",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "304": {
            "$ref": "#/components/responses/NOT_MODIFIED"
          }
        },
        "summary": "List layouts",
        "tags": [
          "Layouts"
        ]
      },
      "post": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "415": {
            "$ref": "#/components/responses/UNSUPPORTED_MEDIA_TYPE"
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LayoutResponse"
                }
              }
            },
            "headers": {
              "ETag": {
                "description": "Tag for the returned entry",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LayoutCreation"
              },
              "example": {
                "title": "Test Room",
                "subtitle": "Room for testing purposes",
                "scripts": {
                  "incoming-text": "display-text",
                  "incoming-image": "display-image",
                  "submit-message": "send-message",
                  "print-history": "plain-history"
                }
              }
            }
          }
        },
        "security": [
          {
            "TokenAuthentication": []
          }
        ],
        "summary": "Add a new layout",
        "tags": [
          "Layouts"
        ]
      }
    },
    "/slurk/api/layouts/{layout_id}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LayoutResponse"
                }
              }
            },
            "headers": {
              "ETag": {
                "description": "Tag for the returned entry",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "304": {
            "$ref": "#/components/responses/NOT_MODIFIED"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          }
        },
        "parameters": [
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Tag to check against",
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "Get a layout by ID",
        "tags": [
          "Layouts"
        ]
      },
      "put": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "415": {
            "$ref": "#/components/responses/UNSUPPORTED_MEDIA_TYPE"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LayoutResponse"
                }
              }
            },
            "headers": {
              "ETag": {
                "description": "Tag for the returned entry",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "412": {
            "$ref": "#/components/responses/PRECONDITION_FAILED"
          },
          "428": {
            "$ref": "#/components/responses/PRECONDITION_REQUIRED"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LayoutCreation"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "If-Match",
            "in": "header",
            "required": true,
            "description": "Tag to check against",
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "TokenAuthentication": []
          }
        ],
        "summary": "Replace a layout identified by ID",
        "tags": [
          "Layouts"
        ]
      },
      "patch": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "415": {
            "$ref": "#/components/responses/UNSUPPORTED_MEDIA_TYPE"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LayoutResponse"
                }
              }
            },
            "headers": {
              "ETag": {
                "description": "Tag for the returned entry",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "412": {
            "$ref": "#/components/responses/PRECONDITION_FAILED"
          },
          "428": {
            "$ref": "#/components/responses/PRECONDITION_REQUIRED"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LayoutUpdate"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "If-Match",
            "in": "header",
            "required": true,
            "description": "Tag to check against",
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "TokenAuthentication": []
          }
        ],
        "summary": "Update a layout identified by ID",
        "tags": [
          "Layouts"
        ]
      },
      "delete": {
        "responses": {
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "412": {
            "$ref": "#/components/responses/PRECONDITION_FAILED"
          },
          "428": {
            "$ref": "#/components/responses/PRECONDITION_REQUIRED"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          }
        },
        "parameters": [
          {
            "name": "If-Match",
            "in": "header",
            "required": true,
            "description": "Tag to check against",
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "TokenAuthentication": []
          }
        ],
        "summary": "Delete a layout identified by ID",
        "tags": [
          "Layouts"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "layout_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/slurk/api/openvidu/config": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          }
        },
        "security": [
          {
            "TokenAuthentication": []
          }
        ],
        "summary": "Retrieve current OpenVidu configuration",
        "description": "See the <a href=\"https://docs.openvidu.io/en/2.18.0/reference-docs/openvidu-config/\">\nOpenVidu documentation</a> on how to change these values.\n\nOnly available if OpenVidu is enabled.",
        "tags": [
          "OpenVidu"
        ]
      }
    },
    "/slurk/api/openvidu/sessions": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SessionResponse"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          }
        },
        "security": [
          {
            "TokenAuthentication": []
          }
        ],
        "summary": "Retrieve all Session from OpenVidu Server",
        "description": "Only available if OpenVidu is enabled.",
        "tags": [
          "OpenVidu"
        ]
      },
      "post": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "415": {
            "$ref": "#/components/responses/UNSUPPORTED_MEDIA_TYPE"
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SessionCreation"
              },
              "example": {}
            }
          }
        },
        "security": [
          {
            "TokenAuthentication": []
          }
        ],
        "summary": "Initialize a Session in OpenVidu Server",
        "description": "This is the very first operation to perform in OpenVidu workflow. After that,\nConnection objects can be generated for this Session and their token passed\nto the client-side, so clients can use it to connect to the Session.\n\nOnly available if OpenVidu is enabled.",
        "tags": [
          "OpenVidu"
        ]
      }
    },
    "/slurk/api/openvidu/sessions/{session_id}": {
      "get": {
        "responses": {
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          }
        },
        "security": [
          {
            "TokenAuthentication": []
          }
        ],
        "summary": "Retrieve a Session from OpenVidu Server",
        "description": "Only available if OpenVidu is enabled.",
        "tags": [
          "OpenVidu"
        ]
      },
      "delete": {
        "responses": {
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          }
        },
        "security": [
          {
            "TokenAuthentication": []
          }
        ],
        "summary": "Close a Session",
        "description": "This will stop all of the processes of this Session: all of its Connections,\nStreams and Recordings will be closed.\n\nOnly available if OpenVidu is enabled.",
        "tags": [
          "OpenVidu"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "session_id",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        }
      ]
    },
    "/slurk/api/openvidu/sessions/{session_id}/signal": {
      "post": {
        "responses": {
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "415": {
            "$ref": "#/components/responses/UNSUPPORTED_MEDIA_TYPE"
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignalCreation"
              }
            }
          }
        },
        "security": [
          {
            "TokenAuthentication": []
          }
        ],
        "summary": "Send a signal to a Session, to specific Connections or as a broadcast message to all Connections.",
        "description": "This is the server-side implementation of the client operation Session.signal.\n\nOnly available if OpenVidu is enabled.",
        "tags": [
          "OpenVidu"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "session_id",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        }
      ]
    },
    "/slurk/api/openvidu/sessions/{session_id}/connections": {
      "get": {
        "responses": {
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WebRtcConnectionResponse"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          }
        },
        "security": [
          {
            "TokenAuthentication": []
          }
        ],
        "summary": "List all Connections from a Session",
        "description": "Only available if OpenVidu is enabled.",
        "tags": [
          "OpenVidu"
        ]
      },
      "post": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "415": {
            "$ref": "#/components/responses/UNSUPPORTED_MEDIA_TYPE"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebRtcConnectionResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebRtcConnectionCreation"
              },
              "example": {}
            }
          }
        },
        "security": [
          {
            "TokenAuthentication": []
          }
        ],
        "summary": "Create a new Connection in the Session",
        "description": "Only available if OpenVidu is enabled.",
        "tags": [
          "OpenVidu"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "session_id",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        }
      ]
    },
    "/slurk/api/openvidu/sessions/{session_id}/connections/{connection_id}": {
      "get": {
        "responses": {
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebRtcConnectionResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          }
        },
        "security": [
          {
            "TokenAuthentication": []
          }
        ],
        "summary": "Get a Connection from a Session",
        "description": "Only available if OpenVidu is enabled.",
        "tags": [
          "OpenVidu"
        ]
      },
      "delete": {
        "responses": {
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          }
        },
        "security": [
          {
            "TokenAuthentication": []
          }
        ],
        "summary": "Force the disconnection of a user from a Session",
        "description": "All of the streams associated to this Connection (both publishers and subscribers) will\nbe destroyed. If the user was publishing a stream, all other subscribers of other users\nreceiving it will also be destroyed.\n\nIf the connection_id belongs to a Connection in pending status, this method will simply\ninvalidate it (its token will be no longer available for any user to connect to the Session).\n\nOnly available if OpenVidu is enabled.",
        "tags": [
          "OpenVidu"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "session_id",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        },
        {
          "in": "path",
          "name": "connection_id",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        }
      ]
    },
    "/slurk/api/openvidu/recordings": {
      "get": {
        "responses": {
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RecordingResponse"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          }
        },
        "security": [
          {
            "TokenAuthentication": []
          }
        ],
        "summary": "Retrieve all Recordings from OpenVidu Server",
        "description": "Only available if OpenVidu is enabled.",
        "tags": [
          "OpenVidu"
        ]
      }
    },
    "/slurk/api/openvidu/recordings/{recording_id}": {
      "get": {
        "responses": {
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecordingResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          }
        },
        "security": [
          {
            "TokenAuthentication": []
          }
        ],
        "summary": "Retrieve a Recording from OpenVidu Server",
        "description": "Only available if OpenVidu is enabled.",
        "tags": [
          "OpenVidu"
        ]
      },
      "delete": {
        "responses": {
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          }
        },
        "security": [
          {
            "TokenAuthentication": []
          }
        ],
        "summary": "Delete a Recording",
        "description": "This will delete all of the recording files from disk\n\nOnly available if OpenVidu is enabled.",
        "tags": [
          "OpenVidu"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "recording_id",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        }
      ]
    },
    "/slurk/api/openvidu/recordings/download/{recording_id}": {
      "get": {
        "responses": {
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecordingResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          }
        },
        "security": [
          {
            "TokenAuthentication": []
          }
        ],
        "summary": "Download a Recording from OpenVidu Server",
        "description": "Only available if OpenVidu is enabled.",
        "tags": [
          "OpenVidu"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "recording_id",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        }
      ]
    },
    "/slurk/api/openvidu/recordings/start/{session_id}": {
      "post": {
        "responses": {
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "415": {
            "$ref": "#/components/responses/UNSUPPORTED_MEDIA_TYPE"
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecordingResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RecordingCreation"
              },
              "example": {}
            }
          }
        },
        "security": [
          {
            "TokenAuthentication": []
          }
        ],
        "summary": "Start the recording of a session",
        "description": "Only available if OpenVidu is enabled.",
        "tags": [
          "OpenVidu"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "session_id",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        }
      ]
    },
    "/slurk/api/openvidu/recordings/stop/{recording_id}": {
      "post": {
        "responses": {
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecordingResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          }
        },
        "security": [
          {
            "TokenAuthentication": []
          }
        ],
        "summary": "Stop the recording of a Session",
        "description": "Only available if OpenVidu is enabled.",
        "tags": [
          "OpenVidu"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "recording_id",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        }
      ]
    },
    "/slurk/api/rooms": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "layout_id",
            "required": false,
            "description": "Filter for layout used in the rooms",
            "schema": {
              "type": "integer",
              "nullable": true
            }
          },
          {
            "in": "query",
            "name": "openvidu_session_id",
            "required": false,
            "description": "Filter for an OpenVidu session",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Tag to check against",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "415": {
            "$ref": "#/components/responses/UNSUPPORTED_MEDIA_TYPE"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoomResponse"
                  }
                }
              }
            },
            "headers": {
              "ETag": {
                "description": "Tag for the returned entry",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "304": {
            "$ref": "#/components/responses/NOT_MODIFIED"
          }
        },
        "summary": "List rooms",
        "tags": [
          "Rooms"
        ]
      },
      "post": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "415": {
            "$ref": "#/components/responses/UNSUPPORTED_MEDIA_TYPE"
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoomResponse"
                }
              }
            },
            "headers": {
              "ETag": {
                "description": "Tag for the returned entry",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoomCreation"
              }
            }
          }
        },
        "security": [
          {
            "TokenAuthentication": []
          }
        ],
        "summary": "Add a new room",
        "tags": [
          "Rooms"
        ]
      }
    },
    "/slurk/api/rooms/{room_id}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoomResponse"
                }
              }
            },
            "headers": {
              "ETag": {
                "description": "Tag for the returned entry",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "304": {
            "$ref": "#/components/responses/NOT_MODIFIED"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          }
        },
        "parameters": [
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Tag to check against",
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "Get a room by ID",
        "tags": [
          "Rooms"
        ]
      },
      "put": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "415": {
            "$ref": "#/components/responses/UNSUPPORTED_MEDIA_TYPE"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoomResponse"
                }
              }
            },
            "headers": {
              "ETag": {
                "description": "Tag for the returned entry",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "412": {
            "$ref": "#/components/responses/PRECONDITION_FAILED"
          },
          "428": {
            "$ref": "#/components/responses/PRECONDITION_REQUIRED"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoomCreation"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "If-Match",
            "in": "header",
            "required": true,
            "description": "Tag to check against",
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "TokenAuthentication": []
          }
        ],
        "summary": "Replace a room identified by ID",
        "tags": [
          "Rooms"
        ]
      },
      "patch": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "415": {
            "$ref": "#/components/responses/UNSUPPORTED_MEDIA_TYPE"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoomResponse"
                }
              }
            },
            "headers": {
              "ETag": {
                "description": "Tag for the returned entry",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "412": {
            "$ref": "#/components/responses/PRECONDITION_FAILED"
          },
          "428": {
            "$ref": "#/components/responses/PRECONDITION_REQUIRED"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoomUpdate"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "If-Match",
            "in": "header",
            "required": true,
            "description": "Tag to check against",
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "TokenAuthentication": []
          }
        ],
        "summary": "Update a room identified by ID",
        "tags": [
          "Rooms"
        ]
      },
      "delete": {
        "responses": {
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "412": {
            "$ref": "#/components/responses/PRECONDITION_FAILED"
          },
          "428": {
            "$ref": "#/components/responses/PRECONDITION_REQUIRED"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          }
        },
        "parameters": [
          {
            "name": "If-Match",
            "in": "header",
            "required": true,
            "description": "Tag to check against",
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "TokenAuthentication": []
          }
        ],
        "summary": "Delete a room identified by ID",
        "tags": [
          "Rooms"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "room_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/slurk/api/rooms/{room_id}/users": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserResponse"
                  }
                }
              }
            },
            "headers": {
              "ETag": {
                "description": "Tag for the returned entry",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "304": {
            "$ref": "#/components/responses/NOT_MODIFIED"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          }
        },
        "parameters": [
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Tag to check against",
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "List active users by rooms",
        "tags": [
          "Rooms"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "room_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/slurk/api/rooms/{room_id}/users/{user_id}/logs": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LogResponse"
                  }
                }
              }
            },
            "headers": {
              "ETag": {
                "description": "Tag for the returned entry",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "304": {
            "$ref": "#/components/responses/NOT_MODIFIED"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          }
        },
        "parameters": [
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Tag to check against",
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "List logs by room and user",
        "tags": [
          "Rooms"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "room_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        },
        {
          "in": "path",
          "name": "user_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/slurk/api/rooms/{room_id}/attribute/id/{id}": {
      "patch": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "415": {
            "$ref": "#/components/responses/UNSUPPORTED_MEDIA_TYPE"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Attribute"
              }
            }
          }
        },
        "security": [
          {
            "TokenAuthentication": []
          }
        ],
        "summary": "Update an element identified by it's ID",
        "tags": [
          "Rooms"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "room_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        },
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        }
      ]
    },
    "/slurk/api/rooms/{room_id}/attribute/class/{cls}": {
      "patch": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "415": {
            "$ref": "#/components/responses/UNSUPPORTED_MEDIA_TYPE"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Attribute"
              }
            }
          }
        },
        "security": [
          {
            "TokenAuthentication": []
          }
        ],
        "summary": "Update an element identified by it's class",
        "tags": [
          "Rooms"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "room_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        },
        {
          "in": "path",
          "name": "cls",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        }
      ]
    },
    "/slurk/api/rooms/{room_id}/attribute/element/{element}": {
      "patch": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "415": {
            "$ref": "#/components/responses/UNSUPPORTED_MEDIA_TYPE"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Attribute"
              }
            }
          }
        },
        "security": [
          {
            "TokenAuthentication": []
          }
        ],
        "summary": "Update an element identified by it's type",
        "tags": [
          "Rooms"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "room_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        },
        {
          "in": "path",
          "name": "element",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        }
      ]
    },
    "/slurk/api/rooms/{room_id}/text/{id}": {
      "patch": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "415": {
            "$ref": "#/components/responses/UNSUPPORTED_MEDIA_TYPE"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Text"
              }
            }
          }
        },
        "security": [
          {
            "TokenAuthentication": []
          }
        ],
        "summary": "Update the text of an element identified by it's ID",
        "tags": [
          "Rooms"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "room_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        },
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        }
      ]
    },
    "/slurk/api/rooms/{room_id}/class/{id}": {
      "post": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "415": {
            "$ref": "#/components/responses/UNSUPPORTED_MEDIA_TYPE"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Class"
              }
            }
          }
        },
        "security": [
          {
            "TokenAuthentication": []
          }
        ],
        "summary": "Add a class to an element identified by it's ID",
        "tags": [
          "Rooms"
        ]
      },
      "delete": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "415": {
            "$ref": "#/components/responses/UNSUPPORTED_MEDIA_TYPE"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Class"
              }
            }
          }
        },
        "security": [
          {
            "TokenAuthentication": []
          }
        ],
        "summary": "Remove a class from an element identified by it's ID",
        "tags": [
          "Rooms"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "room_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        },
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        }
      ]
    },
    "/slurk/api/permissions": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "api",
            "required": false,
            "description": "Filter for API call permissions",
            "schema": {
              "type": "boolean",
              "nullable": true
            }
          },
          {
            "in": "query",
            "name": "send_message",
            "required": false,
            "description": "Filter for plain message sending permissions",
            "schema": {
              "type": "boolean",
              "nullable": true
            }
          },
          {
            "in": "query",
            "name": "send_html_message",
            "required": false,
            "description": "Filter for html message sending permissions",
            "schema": {
              "type": "boolean",
              "nullable": true
            }
          },
          {
            "in": "query",
            "name": "send_image",
            "required": false,
            "description": "Filter for image sending permissions",
            "schema": {
              "type": "boolean",
              "nullable": true
            }
          },
          {
            "in": "query",
            "name": "send_command",
            "required": false,
            "description": "Filter for command sending permissions",
            "schema": {
              "type": "boolean",
              "nullable": true
            }
          },
          {
            "in": "query",
            "name": "send_privately",
            "required": false,
            "description": "Filter for private sending permissions",
            "schema": {
              "type": "boolean",
              "nullable": true
            }
          },
          {
            "in": "query",
            "name": "broadcast",
            "required": false,
            "description": "Filter for broadcasting permissions",
            "schema": {
              "type": "boolean",
              "nullable": true
            }
          },
          {
            "in": "query",
            "name": "openvidu_role",
            "required": false,
            "description": "Filter for OpenVidu role",
            "schema": {
              "type": "string",
              "enum": [
                "SUBSCRIBER",
                "PUBLISHER",
                "MODERATOR"
              ],
              "nullable": true
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Tag to check against",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "415": {
            "$ref": "#/components/responses/UNSUPPORTED_MEDIA_TYPE"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PermissionsResponse"
                  }
                }
              }
            },
            "headers": {
              "ETag": {
                "description": "Tag for the returned entry",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "304": {
            "$ref": "#/components/responses/NOT_MODIFIED"
          }
        },
        "summary": "List permissions",
        "tags": [
          "Permissions"
        ]
      },
      "post": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "415": {
            "$ref": "#/components/responses/UNSUPPORTED_MEDIA_TYPE"
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionsResponse"
                }
              }
            },
            "headers": {
              "ETag": {
                "description": "Tag for the returned entry",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PermissionsCreation"
              },
              "example": {
                "api": true
              }
            }
          }
        },
        "security": [
          {
            "TokenAuthentication": []
          }
        ],
        "summary": "Add a new permissions",
        "tags": [
          "Permissions"
        ]
      }
    },
    "/slurk/api/permissions/{permissions_id}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionsResponse"
                }
              }
            },
            "headers": {
              "ETag": {
                "description": "Tag for the returned entry",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "304": {
            "$ref": "#/components/responses/NOT_MODIFIED"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          }
        },
        "parameters": [
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Tag to check against",
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "Get a permissions by ID",
        "tags": [
          "Permissions"
        ]
      },
      "put": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "415": {
            "$ref": "#/components/responses/UNSUPPORTED_MEDIA_TYPE"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionsResponse"
                }
              }
            },
            "headers": {
              "ETag": {
                "description": "Tag for the returned entry",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "412": {
            "$ref": "#/components/responses/PRECONDITION_FAILED"
          },
          "428": {
            "$ref": "#/components/responses/PRECONDITION_REQUIRED"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PermissionsCreation"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "If-Match",
            "in": "header",
            "required": true,
            "description": "Tag to check against",
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "TokenAuthentication": []
          }
        ],
        "summary": "Replace a permissions identified by ID",
        "tags": [
          "Permissions"
        ]
      },
      "patch": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "415": {
            "$ref": "#/components/responses/UNSUPPORTED_MEDIA_TYPE"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionsResponse"
                }
              }
            },
            "headers": {
              "ETag": {
                "description": "Tag for the returned entry",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "412": {
            "$ref": "#/components/responses/PRECONDITION_FAILED"
          },
          "428": {
            "$ref": "#/components/responses/PRECONDITION_REQUIRED"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PermissionsUpdate"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "If-Match",
            "in": "header",
            "required": true,
            "description": "Tag to check against",
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "TokenAuthentication": []
          }
        ],
        "summary": "Update a permissions identified by ID",
        "tags": [
          "Permissions"
        ]
      },
      "delete": {
        "responses": {
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "412": {
            "$ref": "#/components/responses/PRECONDITION_FAILED"
          },
          "428": {
            "$ref": "#/components/responses/PRECONDITION_REQUIRED"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          }
        },
        "parameters": [
          {
            "name": "If-Match",
            "in": "header",
            "required": true,
            "description": "Tag to check against",
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "TokenAuthentication": []
          }
        ],
        "summary": "Delete a permissions identified by ID",
        "tags": [
          "Permissions"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "permissions_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/slurk/api/tokens": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "permissions_id",
            "required": false,
            "description": "Filter for permissions",
            "schema": {
              "type": "integer",
              "nullable": true
            }
          },
          {
            "in": "query",
            "name": "registrations_left",
            "required": false,
            "description": "Filter for left logins",
            "schema": {
              "type": "integer",
              "nullable": true,
              "minimum": -1,
              "maximum": 9223372036854775807
            }
          },
          {
            "in": "query",
            "name": "room_id",
            "required": false,
            "description": "Filter for rooms",
            "schema": {
              "type": "integer",
              "nullable": true
            }
          },
          {
            "in": "query",
            "name": "task_id",
            "required": false,
            "description": "Filter for tasks",
            "schema": {
              "type": "integer",
              "nullable": true
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Tag to check against",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "415": {
            "$ref": "#/components/responses/UNSUPPORTED_MEDIA_TYPE"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TokenResponse"
                  }
                }
              }
            },
            "headers": {
              "ETag": {
                "description": "Tag for the returned entry",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "304": {
            "$ref": "#/components/responses/NOT_MODIFIED"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          }
        },
        "security": [
          {
            "TokenAuthentication": []
          }
        ],
        "summary": "List tokens",
        "tags": [
          "Tokens"
        ]
      },
      "post": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "415": {
            "$ref": "#/components/responses/UNSUPPORTED_MEDIA_TYPE"
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResponse"
                }
              }
            },
            "headers": {
              "ETag": {
                "description": "Tag for the returned entry",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenCreation"
              }
            }
          }
        },
        "security": [
          {
            "TokenAuthentication": []
          }
        ],
        "summary": "Add a new token",
        "tags": [
          "Tokens"
        ]
      }
    },
    "/slurk/api/tokens/{token_id}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResponse"
                }
              }
            },
            "headers": {
              "ETag": {
                "description": "Tag for the returned entry",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "304": {
            "$ref": "#/components/responses/NOT_MODIFIED"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          }
        },
        "parameters": [
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Tag to check against",
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "Get a token by ID",
        "tags": [
          "Tokens"
        ]
      },
      "put": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "415": {
            "$ref": "#/components/responses/UNSUPPORTED_MEDIA_TYPE"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResponse"
                }
              }
            },
            "headers": {
              "ETag": {
                "description": "Tag for the returned entry",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "412": {
            "$ref": "#/components/responses/PRECONDITION_FAILED"
          },
          "428": {
            "$ref": "#/components/responses/PRECONDITION_REQUIRED"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenCreation"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "If-Match",
            "in": "header",
            "required": true,
            "description": "Tag to check against",
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "TokenAuthentication": []
          }
        ],
        "summary": "Replace a token identified by ID",
        "tags": [
          "Tokens"
        ]
      },
      "patch": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "415": {
            "$ref": "#/components/responses/UNSUPPORTED_MEDIA_TYPE"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResponse"
                }
              }
            },
            "headers": {
              "ETag": {
                "description": "Tag for the returned entry",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "412": {
            "$ref": "#/components/responses/PRECONDITION_FAILED"
          },
          "428": {
            "$ref": "#/components/responses/PRECONDITION_REQUIRED"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenUpdate"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "If-Match",
            "in": "header",
            "required": true,
            "description": "Tag to check against",
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "TokenAuthentication": []
          }
        ],
        "summary": "Update a token identified by ID",
        "tags": [
          "Tokens"
        ]
      },
      "delete": {
        "responses": {
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "412": {
            "$ref": "#/components/responses/PRECONDITION_FAILED"
          },
          "428": {
            "$ref": "#/components/responses/PRECONDITION_REQUIRED"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          }
        },
        "parameters": [
          {
            "name": "If-Match",
            "in": "header",
            "required": true,
            "description": "Tag to check against",
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "TokenAuthentication": []
          }
        ],
        "summary": "Delete a token identified by ID",
        "tags": [
          "Tokens"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "token_id",
          "required": true,
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ]
    },
    "/slurk/api/users": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "required": false,
            "description": "Filter for a user name",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "in": "query",
            "name": "token_id",
            "required": false,
            "description": "Filter for users using this token",
            "schema": {
              "type": "string",
              "format": "uuid",
              "writeOnly": true,
              "nullable": true
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Tag to check against",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "415": {
            "$ref": "#/components/responses/UNSUPPORTED_MEDIA_TYPE"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserResponse"
                  }
                }
              }
            },
            "headers": {
              "ETag": {
                "description": "Tag for the returned entry",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "304": {
            "$ref": "#/components/responses/NOT_MODIFIED"
          }
        },
        "summary": "List users",
        "tags": [
          "Users"
        ]
      },
      "post": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "415": {
            "$ref": "#/components/responses/UNSUPPORTED_MEDIA_TYPE"
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            },
            "headers": {
              "ETag": {
                "description": "Tag for the returned entry",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreation"
              }
            }
          }
        },
        "security": [
          {
            "TokenAuthentication": []
          }
        ],
        "summary": "Add a new user",
        "description": "The token is required to have registrations left and a room associated",
        "tags": [
          "Users"
        ]
      }
    },
    "/slurk/api/users/{user_id}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            },
            "headers": {
              "ETag": {
                "description": "Tag for the returned entry",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "304": {
            "$ref": "#/components/responses/NOT_MODIFIED"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          }
        },
        "parameters": [
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Tag to check against",
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "Get a user by ID",
        "tags": [
          "Users"
        ]
      },
      "put": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "415": {
            "$ref": "#/components/responses/UNSUPPORTED_MEDIA_TYPE"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            },
            "headers": {
              "ETag": {
                "description": "Tag for the returned entry",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "412": {
            "$ref": "#/components/responses/PRECONDITION_FAILED"
          },
          "428": {
            "$ref": "#/components/responses/PRECONDITION_REQUIRED"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreation"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "If-Match",
            "in": "header",
            "required": true,
            "description": "Tag to check against",
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "TokenAuthentication": []
          }
        ],
        "summary": "Replace a user identified by ID",
        "tags": [
          "Users"
        ]
      },
      "patch": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "415": {
            "$ref": "#/components/responses/UNSUPPORTED_MEDIA_TYPE"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            },
            "headers": {
              "ETag": {
                "description": "Tag for the returned entry",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "412": {
            "$ref": "#/components/responses/PRECONDITION_FAILED"
          },
          "428": {
            "$ref": "#/components/responses/PRECONDITION_REQUIRED"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdate"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "If-Match",
            "in": "header",
            "required": true,
            "description": "Tag to check against",
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "TokenAuthentication": []
          }
        ],
        "summary": "Update a user identified by ID",
        "tags": [
          "Users"
        ]
      },
      "delete": {
        "responses": {
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "412": {
            "$ref": "#/components/responses/PRECONDITION_FAILED"
          },
          "428": {
            "$ref": "#/components/responses/PRECONDITION_REQUIRED"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          }
        },
        "parameters": [
          {
            "name": "If-Match",
            "in": "header",
            "required": true,
            "description": "Tag to check against",
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "TokenAuthentication": []
          }
        ],
        "summary": "Delete a user identified by ID",
        "tags": [
          "Users"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "user_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/slurk/api/users/{user_id}/task": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskResponse"
                }
              }
            },
            "headers": {
              "ETag": {
                "description": "Tag for the returned entry",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "304": {
            "$ref": "#/components/responses/NOT_MODIFIED"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          }
        },
        "parameters": [
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Tag to check against",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Users"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "user_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/slurk/api/users/{user_id}/rooms": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoomResponse"
                  }
                }
              }
            },
            "headers": {
              "ETag": {
                "description": "Tag for the returned entry",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "304": {
            "$ref": "#/components/responses/NOT_MODIFIED"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          }
        },
        "parameters": [
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Tag to check against",
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "List rooms by users",
        "tags": [
          "Users"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "user_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/slurk/api/users/{user_id}/rooms/{room_id}": {
      "post": {
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            },
            "headers": {
              "ETag": {
                "description": "Tag for the returned entry",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          }
        },
        "security": [
          {
            "TokenAuthentication": []
          }
        ],
        "summary": "Add a user to a room",
        "tags": [
          "Users"
        ]
      },
      "delete": {
        "responses": {
          "204": {
            "description": "No Content"
          },
          "412": {
            "$ref": "#/components/responses/PRECONDITION_FAILED"
          },
          "428": {
            "$ref": "#/components/responses/PRECONDITION_REQUIRED"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          }
        },
        "parameters": [
          {
            "name": "If-Match",
            "in": "header",
            "required": true,
            "description": "Tag to check against",
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "TokenAuthentication": []
          }
        ],
        "summary": "Remove a user from a room",
        "tags": [
          "Users"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "room_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        },
        {
          "in": "path",
          "name": "user_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/slurk/api/users/{user_id}/attribute/id/{id}": {
      "patch": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "415": {
            "$ref": "#/components/responses/UNSUPPORTED_MEDIA_TYPE"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Attribute"
              }
            }
          }
        },
        "security": [
          {
            "TokenAuthentication": []
          }
        ],
        "summary": "Update an element identified by it's ID",
        "tags": [
          "Users"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "user_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        },
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        }
      ]
    },
    "/slurk/api/users/{user_id}/attribute/class/{cls}": {
      "patch": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "415": {
            "$ref": "#/components/responses/UNSUPPORTED_MEDIA_TYPE"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Attribute"
              }
            }
          }
        },
        "security": [
          {
            "TokenAuthentication": []
          }
        ],
        "summary": "Update an element identified by it's class",
        "tags": [
          "Users"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "user_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        },
        {
          "in": "path",
          "name": "cls",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        }
      ]
    },
    "/slurk/api/users/{user_id}/attribute/element/{element}": {
      "patch": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "415": {
            "$ref": "#/components/responses/UNSUPPORTED_MEDIA_TYPE"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Attribute"
              }
            }
          }
        },
        "security": [
          {
            "TokenAuthentication": []
          }
        ],
        "summary": "Update an element identified by it's type",
        "tags": [
          "Users"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "user_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        },
        {
          "in": "path",
          "name": "element",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        }
      ]
    },
    "/slurk/api/users/{user_id}/text/{id}": {
      "patch": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "415": {
            "$ref": "#/components/responses/UNSUPPORTED_MEDIA_TYPE"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Text"
              }
            }
          }
        },
        "security": [
          {
            "TokenAuthentication": []
          }
        ],
        "summary": "Update the text of an element identified by it's ID",
        "tags": [
          "Users"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "user_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        },
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        }
      ]
    },
    "/slurk/api/users/{user_id}/class/{id}": {
      "post": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "415": {
            "$ref": "#/components/responses/UNSUPPORTED_MEDIA_TYPE"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Class"
              }
            }
          }
        },
        "security": [
          {
            "TokenAuthentication": []
          }
        ],
        "summary": "Add a class to an element identified by it's ID",
        "tags": [
          "Users"
        ]
      },
      "delete": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "415": {
            "$ref": "#/components/responses/UNSUPPORTED_MEDIA_TYPE"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Class"
              }
            }
          }
        },
        "security": [
          {
            "TokenAuthentication": []
          }
        ],
        "summary": "Remove a class from an element identified by it's ID",
        "tags": [
          "Users"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "user_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        },
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        }
      ]
    },
    "/slurk/api/tasks": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "required": false,
            "description": "Filter for a task name",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "in": "query",
            "name": "num_users",
            "required": false,
            "description": "Filter for number of users needed for this task",
            "schema": {
              "type": "integer",
              "nullable": true,
              "minimum": 0,
              "maximum": 9223372036854775807
            }
          },
          {
            "in": "query",
            "name": "layout_id",
            "required": false,
            "description": "Filter for layout used in the tasks",
            "schema": {
              "type": "integer",
              "nullable": true
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Tag to check against",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "415": {
            "$ref": "#/components/responses/UNSUPPORTED_MEDIA_TYPE"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaskResponse"
                  }
                }
              }
            },
            "headers": {
              "ETag": {
                "description": "Tag for the returned entry",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "304": {
            "$ref": "#/components/responses/NOT_MODIFIED"
          }
        },
        "summary": "List tasks",
        "tags": [
          "Tasks"
        ]
      },
      "post": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "415": {
            "$ref": "#/components/responses/UNSUPPORTED_MEDIA_TYPE"
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskResponse"
                }
              }
            },
            "headers": {
              "ETag": {
                "description": "Tag for the returned entry",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskCreation"
              }
            }
          }
        },
        "security": [
          {
            "TokenAuthentication": []
          }
        ],
        "summary": "Add a new task",
        "tags": [
          "Tasks"
        ]
      }
    },
    "/slurk/api/tasks/{task_id}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskResponse"
                }
              }
            },
            "headers": {
              "ETag": {
                "description": "Tag for the returned entry",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "304": {
            "$ref": "#/components/responses/NOT_MODIFIED"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          }
        },
        "parameters": [
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Tag to check against",
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "Get a task by ID",
        "tags": [
          "Tasks"
        ]
      },
      "put": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "415": {
            "$ref": "#/components/responses/UNSUPPORTED_MEDIA_TYPE"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskResponse"
                }
              }
            },
            "headers": {
              "ETag": {
                "description": "Tag for the returned entry",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "412": {
            "$ref": "#/components/responses/PRECONDITION_FAILED"
          },
          "428": {
            "$ref": "#/components/responses/PRECONDITION_REQUIRED"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskCreation"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "If-Match",
            "in": "header",
            "required": true,
            "description": "Tag to check against",
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "TokenAuthentication": []
          }
        ],
        "summary": "Replace a task identified by ID",
        "tags": [
          "Tasks"
        ]
      },
      "patch": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "415": {
            "$ref": "#/components/responses/UNSUPPORTED_MEDIA_TYPE"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskResponse"
                }
              }
            },
            "headers": {
              "ETag": {
                "description": "Tag for the returned entry",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "412": {
            "$ref": "#/components/responses/PRECONDITION_FAILED"
          },
          "428": {
            "$ref": "#/components/responses/PRECONDITION_REQUIRED"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskUpdate"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "If-Match",
            "in": "header",
            "required": true,
            "description": "Tag to check against",
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "TokenAuthentication": []
          }
        ],
        "summary": "Update a task identified by ID",
        "tags": [
          "Tasks"
        ]
      },
      "delete": {
        "responses": {
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "412": {
            "$ref": "#/components/responses/PRECONDITION_FAILED"
          },
          "428": {
            "$ref": "#/components/responses/PRECONDITION_REQUIRED"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          }
        },
        "parameters": [
          {
            "name": "If-Match",
            "in": "header",
            "required": true,
            "description": "Tag to check against",
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "TokenAuthentication": []
          }
        ],
        "summary": "Delete a task identified by ID",
        "tags": [
          "Tasks"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "task_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/slurk/api/logs": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "event",
            "required": false,
            "description": "Filter by event",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "in": "query",
            "name": "user_id",
            "required": false,
            "description": "Filter for user associated with this log entry",
            "schema": {
              "type": "integer",
              "nullable": true
            }
          },
          {
            "in": "query",
            "name": "room_id",
            "required": false,
            "description": "Filter for room associated with this log entry",
            "schema": {
              "type": "integer",
              "nullable": true
            }
          },
          {
            "in": "query",
            "name": "receiver_id",
            "required": false,
            "description": "Filter for receiver associated with this log entry",
            "schema": {
              "type": "integer",
              "nullable": true
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Tag to check against",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "415": {
            "$ref": "#/components/responses/UNSUPPORTED_MEDIA_TYPE"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LogResponse"
                  }
                }
              }
            },
            "headers": {
              "ETag": {
                "description": "Tag for the returned entry",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "304": {
            "$ref": "#/components/responses/NOT_MODIFIED"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          }
        },
        "security": [
          {
            "TokenAuthentication": []
          }
        ],
        "summary": "List logs",
        "tags": [
          "Log"
        ]
      },
      "post": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "415": {
            "$ref": "#/components/responses/UNSUPPORTED_MEDIA_TYPE"
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogResponse"
                }
              }
            },
            "headers": {
              "ETag": {
                "description": "Tag for the returned entry",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LogCreation"
              }
            }
          }
        },
        "security": [
          {
            "TokenAuthentication": []
          }
        ],
        "summary": "Add a new log",
        "tags": [
          "Log"
        ]
      }
    },
    "/slurk/api/logs/{log_id}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogResponse"
                }
              }
            },
            "headers": {
              "ETag": {
                "description": "Tag for the returned entry",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "304": {
            "$ref": "#/components/responses/NOT_MODIFIED"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          }
        },
        "parameters": [
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Tag to check against",
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "TokenAuthentication": []
          }
        ],
        "summary": "Get a log by ID",
        "tags": [
          "Log"
        ]
      },
      "put": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "415": {
            "$ref": "#/components/responses/UNSUPPORTED_MEDIA_TYPE"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogResponse"
                }
              }
            },
            "headers": {
              "ETag": {
                "description": "Tag for the returned entry",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "412": {
            "$ref": "#/components/responses/PRECONDITION_FAILED"
          },
          "428": {
            "$ref": "#/components/responses/PRECONDITION_REQUIRED"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LogCreation"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "If-Match",
            "in": "header",
            "required": true,
            "description": "Tag to check against",
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "TokenAuthentication": []
          }
        ],
        "summary": "Replace a log identified by ID",
        "tags": [
          "Log"
        ]
      },
      "patch": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "415": {
            "$ref": "#/components/responses/UNSUPPORTED_MEDIA_TYPE"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogResponse"
                }
              }
            },
            "headers": {
              "ETag": {
                "description": "Tag for the returned entry",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "412": {
            "$ref": "#/components/responses/PRECONDITION_FAILED"
          },
          "428": {
            "$ref": "#/components/responses/PRECONDITION_REQUIRED"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LogUpdate"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "If-Match",
            "in": "header",
            "required": true,
            "description": "Tag to check against",
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "TokenAuthentication": []
          }
        ],
        "summary": "Update a log identified by ID",
        "tags": [
          "Log"
        ]
      },
      "delete": {
        "responses": {
          "204": {
            "description": "No Content"
          },
          "412": {
            "$ref": "#/components/responses/PRECONDITION_FAILED"
          },
          "428": {
            "$ref": "#/components/responses/PRECONDITION_REQUIRED"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          }
        },
        "parameters": [
          {
            "name": "If-Match",
            "in": "header",
            "required": true,
            "description": "Tag to check against",
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "TokenAuthentication": []
          }
        ],
        "summary": "Delete a log identified by ID",
        "tags": [
          "Log"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "log_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    }
  },
  "info": {
    "title": "slurk",
    "version": "v3"
  },
  "tags": [
    {
      "name": "Layouts",
      "description": ""
    },
    {
      "name": "OpenVidu",
      "description": ""
    },
    {
      "name": "Rooms",
      "description": ""
    },
    {
      "name": "Permissions",
      "description": ""
    },
    {
      "name": "Tokens",
      "description": ""
    },
    {
      "name": "Users",
      "description": ""
    },
    {
      "name": "Tasks",
      "description": ""
    },
    {
      "name": "Log",
      "description": ""
    }
  ],
  "openapi": "3.0.2",
  "components": {
    "schemas": {
      "OpenViduSettingsFallbackResponse": {
        "type": "object",
        "properties": {
          "start_with_audio": {
            "type": "boolean",
            "description": "Start audio on joining the room"
          },
          "start_with_video": {
            "type": "boolean",
            "description": "Start video on joining the room"
          },
          "video_resolution": {
            "type": "string",
            "description": "Video resolution"
          },
          "video_framerate": {
            "type": "integer",
            "description": "Framerate for video"
          },
          "video_min_recv_bandwidth": {
            "type": "integer",
            "description": "Minimum video bandwidth sent from clients to OpenVidu Server, in kbps. 0 means unconstrained"
          },
          "video_max_recv_bandwidth": {
            "type": "integer",
            "description": "Maximum video bandwidth sent from clients to OpenVidu Server, in kbps. 0 means unconstrained"
          },
          "video_min_send_bandwidth": {
            "type": "integer",
            "description": "Minimum video bandwidth sent from OpenVidu Server to clients, in kbps. 0 means unconstrained"
          },
          "video_max_send_bandwidth": {
            "type": "integer",
            "description": "Maximum video bandwidth sent from OpenVidu Server to clients, in kbps. 0 means unconstrained"
          },
          "video_publisher_location": {
            "type": "string",
            "nullable": true,
            "description": "Corresponding id in html where publisher video is shown"
          },
          "video_subscribers_location": {
            "type": "string",
            "nullable": true,
            "description": "Corresponding id in html where subscribed videos are shown"
          },
          "allowed_filters": {
            "type": "array",
            "description": "Names of the filters the Connection will be able to apply to its published streams",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "LayoutResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "Unique ID that identifies this entity"
          },
          "date_created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Server time at which this entity was created"
          },
          "date_modified": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true,
            "description": "Server time when this entity was last modified"
          },
          "title": {
            "type": "string",
            "description": "Title of the layout"
          },
          "subtitle": {
            "type": "string",
            "nullable": true,
            "description": "Subtitle of the layout"
          },
          "html": {
            "type": "string",
            "readOnly": true,
            "description": "HTML used in the layout"
          },
          "css": {
            "type": "string",
            "readOnly": true,
            "description": "Stylesheet used in the layout"
          },
          "script": {
            "type": "string",
            "readOnly": true,
            "description": "Script injected in the layout"
          },
          "show_users": {
            "type": "boolean",
            "description": "Show a user list in the layout"
          },
          "show_latency": {
            "type": "boolean",
            "description": "Show the current latency in the layout"
          },
          "read_only": {
            "type": "boolean",
            "description": "Make the room read-only"
          },
          "openvidu_settings": {
            "description": "Settings for connections used for this layout",
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenViduSettingsFallbackResponse"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "Scripts": {
        "type": "object",
        "properties": {
          "print-history": {
            "type": "string",
            "default": null,
            "nullable": true,
            "description": "Used for printing the chat history"
          },
          "incoming-image": {
            "type": "string",
            "default": null,
            "nullable": true,
            "description": "Called when an image is received"
          },
          "typing-users": {
            "type": "string",
            "default": null,
            "nullable": true,
            "description": "Called when state of currently typing users is changed"
          },
          "submit-message": {
            "type": "string",
            "default": null,
            "nullable": true,
            "description": "Called when a message is sent"
          },
          "plain": {
            "type": "array",
            "default": null,
            "nullable": true,
            "description": "Injected as a script file into the site",
            "items": {
              "type": "string"
            }
          },
          "document-ready": {
            "type": "array",
            "default": null,
            "nullable": true,
            "description": "Called when site is fully loaded",
            "items": {
              "type": "string"
            }
          },
          "incoming-text": {
            "type": "string",
            "default": null,
            "nullable": true,
            "description": "Called when a text message is received"
          }
        }
      },
      "OpenViduSettingsFallbackCreation": {
        "type": "object",
        "properties": {
          "start_with_audio": {
            "type": "boolean",
            "default": true,
            "description": "Start audio on joining the room"
          },
          "start_with_video": {
            "type": "boolean",
            "default": true,
            "description": "Start video on joining the room"
          },
          "video_resolution": {
            "type": "string",
            "default": "640x480",
            "description": "Video resolution"
          },
          "video_framerate": {
            "type": "integer",
            "default": 30,
            "description": "Framerate for video"
          },
          "video_min_recv_bandwidth": {
            "type": "integer",
            "default": 300,
            "description": "Minimum video bandwidth sent from clients to OpenVidu Server, in kbps. 0 means unconstrained"
          },
          "video_max_recv_bandwidth": {
            "type": "integer",
            "default": 1000,
            "description": "Maximum video bandwidth sent from clients to OpenVidu Server, in kbps. 0 means unconstrained"
          },
          "video_min_send_bandwidth": {
            "type": "integer",
            "default": 300,
            "description": "Minimum video bandwidth sent from OpenVidu Server to clients, in kbps. 0 means unconstrained"
          },
          "video_max_send_bandwidth": {
            "type": "integer",
            "default": 1000,
            "description": "Maximum video bandwidth sent from OpenVidu Server to clients, in kbps. 0 means unconstrained"
          },
          "video_publisher_location": {
            "type": "string",
            "default": "header",
            "nullable": true,
            "description": "Corresponding id in html where publisher video is shown"
          },
          "video_subscribers_location": {
            "type": "string",
            "default": "sidebar",
            "nullable": true,
            "description": "Corresponding id in html where subscribed videos are shown"
          },
          "allowed_filters": {
            "type": "array",
            "default": [],
            "description": "Names of the filters the Connection will be able to apply to its published streams",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "LayoutCreation": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Title of the layout"
          },
          "subtitle": {
            "type": "string",
            "default": null,
            "nullable": true,
            "description": "Subtitle of the layout"
          },
          "html": {
            "type": "array",
            "default": [],
            "writeOnly": true,
            "description": "HTML used in the layout",
            "items": {
              "type": "object"
            }
          },
          "css": {
            "type": "object",
            "default": {},
            "writeOnly": true,
            "description": "Stylesheet used in the layout",
            "additionalProperties": {
              "type": "object",
              "description": "Dictionary of CSS declarations mapping a CSS value to a CSS property"
            }
          },
          "scripts": {
            "default": {},
            "writeOnly": true,
            "description": "Scripts to be injected in the layout",
            "allOf": [
              {
                "$ref": "#/components/schemas/Scripts"
              }
            ]
          },
          "show_users": {
            "type": "boolean",
            "default": true,
            "description": "Show a user list in the layout"
          },
          "show_latency": {
            "type": "boolean",
            "default": true,
            "description": "Show the current latency in the layout"
          },
          "read_only": {
            "type": "boolean",
            "default": false,
            "description": "Make the room read-only"
          },
          "openvidu_settings": {
            "default": {
              "start_with_audio": true,
              "start_with_video": true,
              "video_resolution": "640x480",
              "video_framerate": 30,
              "video_min_recv_bandwidth": 300,
              "video_max_recv_bandwidth": 1000,
              "video_min_send_bandwidth": 300,
              "video_max_send_bandwidth": 1000,
              "video_publisher_location": "header",
              "video_subscribers_location": "sidebar",
              "allowed_filters": []
            },
            "description": "Settings for connections used for this layout",
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenViduSettingsFallbackCreation"
              }
            ]
          }
        },
        "required": [
          "title"
        ],
        "additionalProperties": false
      },
      "Error": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "object",
            "nullable": true,
            "description": "Errors"
          },
          "status": {
            "type": "string",
            "description": "Error name"
          },
          "code": {
            "type": "integer",
            "description": "Error code"
          },
          "message": {
            "type": "string",
            "description": "Error message"
          }
        }
      },
      "OpenViduSettingsFallbackUpdate": {
        "type": "object",
        "properties": {
          "start_with_audio": {
            "type": "boolean",
            "description": "Start audio on joining the room"
          },
          "start_with_video": {
            "type": "boolean",
            "description": "Start video on joining the room"
          },
          "video_resolution": {
            "type": "string",
            "description": "Video resolution"
          },
          "video_framerate": {
            "type": "integer",
            "description": "Framerate for video"
          },
          "video_min_recv_bandwidth": {
            "type": "integer",
            "description": "Minimum video bandwidth sent from clients to OpenVidu Server, in kbps. 0 means unconstrained"
          },
          "video_max_recv_bandwidth": {
            "type": "integer",
            "description": "Maximum video bandwidth sent from clients to OpenVidu Server, in kbps. 0 means unconstrained"
          },
          "video_min_send_bandwidth": {
            "type": "integer",
            "description": "Minimum video bandwidth sent from OpenVidu Server to clients, in kbps. 0 means unconstrained"
          },
          "video_max_send_bandwidth": {
            "type": "integer",
            "description": "Maximum video bandwidth sent from OpenVidu Server to clients, in kbps. 0 means unconstrained"
          },
          "video_publisher_location": {
            "type": "string",
            "nullable": true,
            "description": "Corresponding id in html where publisher video is shown"
          },
          "video_subscribers_location": {
            "type": "string",
            "nullable": true,
            "description": "Corresponding id in html where subscribed videos are shown"
          },
          "allowed_filters": {
            "type": "array",
            "description": "Names of the filters the Connection will be able to apply to its published streams",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "LayoutUpdate": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Title of the layout"
          },
          "subtitle": {
            "type": "string",
            "nullable": true,
            "description": "Subtitle of the layout"
          },
          "html": {
            "type": "array",
            "writeOnly": true,
            "description": "HTML used in the layout",
            "items": {
              "type": "object"
            }
          },
          "css": {
            "type": "object",
            "writeOnly": true,
            "description": "Stylesheet used in the layout",
            "additionalProperties": {
              "type": "object",
              "description": "Dictionary of CSS declarations mapping a CSS value to a CSS property"
            }
          },
          "scripts": {
            "writeOnly": true,
            "description": "Scripts to be injected in the layout",
            "allOf": [
              {
                "$ref": "#/components/schemas/Scripts"
              }
            ]
          },
          "show_users": {
            "type": "boolean",
            "description": "Show a user list in the layout"
          },
          "show_latency": {
            "type": "boolean",
            "description": "Show the current latency in the layout"
          },
          "read_only": {
            "type": "boolean",
            "description": "Make the room read-only"
          },
          "openvidu_settings": {
            "description": "Settings for connections used for this layout",
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenViduSettingsFallbackUpdate"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "StreamsConfigResponse": {
        "type": "object",
        "properties": {
          "video_max_recv_bandwith": {
            "type": "integer",
            "description": "Maximum video bandwidth sent from clients to OpenVidu Server, in kbps. 0 means unconstrained"
          },
          "video_max_send_bandwith": {
            "type": "integer",
            "description": "Maximum video bandwidth sent from OpenVidu Server to clients, in kbps. 0 means unconstrained"
          },
          "video_min_recv_bandwith": {
            "type": "integer",
            "description": "Minimum video bandwidth sent from clients to OpenVidu Server, in kbps. 0 means unconstrained"
          },
          "video_min_send_bandwith": {
            "type": "integer",
            "description": "Minimum video bandwidth sent from OpenVidu Server to clients, in kbps. 0 means unconstrained"
          }
        },
        "additionalProperties": false
      },
      "SessionsConfigResponse": {
        "type": "object",
        "properties": {
          "garbage_interval": {
            "type": "integer",
            "description": "How often the garbage collector of non active sessions runs"
          },
          "garbage_threshold": {
            "type": "integer",
            "description": "Minimum time in seconds that a non active session must have been in existence for the garbage collector of non active sessions to remove it"
          }
        },
        "additionalProperties": false
      },
      "RecordingConfigResponse": {
        "type": "object",
        "properties": {
          "version": {
            "type": "string",
            "description": "Version of the recording"
          },
          "path": {
            "type": "string",
            "description": "System path where to store the video files of recorded sessions"
          },
          "public_access": {
            "type": "boolean",
            "description": "Whether to allow free http access to recorded sessions or not"
          },
          "notification": {
            "type": "string",
            "description": "Which users should receive the recording events in the client side"
          },
          "custom_layout": {
            "type": "string",
            "description": "System path where OpenVidu Server should look for custom recording layouts"
          },
          "autostop_timeout": {
            "type": "integer",
            "description": "Timeout in seconds for recordings to automatically stop when conditions are met"
          }
        },
        "additionalProperties": false
      },
      "WebhookConfigResponse": {
        "type": "object",
        "properties": {
          "endpoints": {
            "type": "array",
            "description": "HTTP endpoint where OpenVidu Server will send the POST messages with webhook events",
            "items": {
              "type": "string"
            }
          },
          "headers": {
            "type": "array",
            "description": "HTTP headers that OpenVidu Server will append to each POST message of webhook events",
            "items": {
              "type": "string"
            }
          },
          "events": {
            "type": "array",
            "description": "Type of events OpenVidu Server will send to your webhook",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "ConfigResponse": {
        "type": "object",
        "properties": {
          "version": {
            "type": "string",
            "description": "Version of the OpenVidu Server"
          },
          "domain_or_public_ip": {
            "type": "string",
            "description": "Domain name where OpenVidu Server is available"
          },
          "https_port": {
            "type": "integer",
            "description": "Secure port where OpenVidu Server is listening"
          },
          "public_url": {
            "type": "string",
            "description": "URL where OpenVidu Server is available"
          },
          "cdr": {
            "type": "boolean",
            "description": "Call Detail Record is enabled"
          },
          "streams": {
            "description": "Configuration for streams",
            "allOf": [
              {
                "$ref": "#/components/schemas/StreamsConfigResponse"
              }
            ]
          },
          "sessions": {
            "description": "Default configuration for sessions",
            "allOf": [
              {
                "$ref": "#/components/schemas/SessionsConfigResponse"
              }
            ]
          },
          "recording": {
            "nullable": true,
            "description": "Configuration for recordings",
            "allOf": [
              {
                "$ref": "#/components/schemas/RecordingConfigResponse"
              }
            ]
          },
          "webhook": {
            "nullable": true,
            "description": "Configuration for webhooks",
            "allOf": [
              {
                "$ref": "#/components/schemas/WebhookConfigResponse"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "DefaultRecordingPropertiesResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true,
            "description": "Name of the Recording"
          },
          "output_mode": {
            "type": "string",
            "enum": [
              "COMPOSED",
              "INDIVIDUAL",
              "COMPOSED_QUICK_START"
            ],
            "description": "Output mode of the Recording"
          },
          "has_audio": {
            "type": "boolean",
            "description": "True if the Recording includes an audio track, false otherwise"
          },
          "has_video": {
            "type": "boolean",
            "description": "True if the Recording includes a video track, false otherwise"
          },
          "recording_layout": {
            "type": "string",
            "enum": [
              "BEST_FIT",
              "CUSTOM"
            ],
            "description": "The recording layout that is being used"
          },
          "resolution": {
            "type": "string",
            "description": "Resolution of the video file"
          },
          "frame_rate": {
            "type": "integer",
            "minimum": 1,
            "maximum": 120,
            "description": "Frame rate of the video file"
          }
        },
        "additionalProperties": false
      },
      "VideoDimensions": {
        "type": "object",
        "properties": {
          "width": {
            "type": "integer",
            "description": "Width of the video"
          },
          "height": {
            "type": "integer",
            "description": "Height of the video"
          }
        },
        "additionalProperties": false
      },
      "MediaOptions": {
        "type": "object",
        "properties": {
          "has_video": {
            "type": "boolean",
            "readOnly": true,
            "description": "True if the stream has a video track, false otherwise"
          },
          "has_audio": {
            "type": "boolean",
            "readOnly": true,
            "description": "True if the stream has an audio track, false otherwise"
          },
          "video_active": {
            "type": "boolean",
            "readOnly": true,
            "description": "True if the video track is active, false otherwise"
          },
          "audio_active": {
            "type": "boolean",
            "readOnly": true,
            "description": "True if the audio track is active, false otherwise"
          },
          "frame_rate": {
            "type": "integer",
            "readOnly": true,
            "description": "The frame rate of the stream"
          },
          "video_dimensions": {
            "readOnly": true,
            "description": "The video dimensions of the stream",
            "allOf": [
              {
                "$ref": "#/components/schemas/VideoDimensions"
              }
            ]
          },
          "type_of_video": {
            "type": "string",
            "readOnly": true,
            "description": "The type of video"
          },
          "filter": {
            "type": "object",
            "readOnly": true,
            "description": "Filter used for the stream"
          }
        },
        "additionalProperties": false
      },
      "Publisher": {
        "type": "object",
        "properties": {
          "stream_id": {
            "type": "string",
            "readOnly": true,
            "description": "Identifier of the stream"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Time when the stream was published"
          },
          "media_options": {
            "readOnly": true,
            "description": "Current properties of the published stream",
            "allOf": [
              {
                "$ref": "#/components/schemas/MediaOptions"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "Subscriber": {
        "type": "object",
        "properties": {
          "stream_id": {
            "type": "string",
            "readOnly": true,
            "description": "Identifier of the stream"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Time when the subscription was established"
          }
        },
        "additionalProperties": false
      },
      "KurentoOptions": {
        "type": "object",
        "properties": {
          "video_max_recv_bandwith": {
            "type": "integer",
            "description": "Maximum video bandwidth sent from clients to OpenVidu Server, in kbps. 0 means unconstrained"
          },
          "video_max_send_bandwith": {
            "type": "integer",
            "description": "Maximum video bandwidth sent from OpenVidu Server to clients, in kbps. 0 means unconstrained"
          },
          "video_min_recv_bandwith": {
            "type": "integer",
            "description": "Minimum video bandwidth sent from clients to OpenVidu Server, in kbps. 0 means unconstrained"
          },
          "video_min_send_bandwith": {
            "type": "integer",
            "description": "Minimum video bandwidth sent from OpenVidu Server to clients, in kbps. 0 means unconstrained"
          },
          "allowed_filters": {
            "type": "array",
            "description": "Names of the filters the Connection will be able to apply to its published streams",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "WebRtcConnection": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true,
            "description": "Identifier of the Connection"
          },
          "data": {
            "type": "string",
            "writeOnly": true,
            "description": "Metadata associated to this Connection. This populates property `server_data` of the Connection object"
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "active"
            ],
            "readOnly": true,
            "description": "Status of the Connection"
          },
          "session_id": {
            "type": "string",
            "readOnly": true,
            "description": "Identifier of the Session to which the user is connected"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Time when the connection was created"
          },
          "active_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true,
            "description": "Time when the Connection was taken by a user by calling method Session.connect with the Connection's token property"
          },
          "platform": {
            "type": "string",
            "readOnly": true,
            "nullable": true,
            "description": "Complete description of the platform used by the participant to connect to the Session"
          },
          "token": {
            "type": "string",
            "readOnly": true,
            "description": "Token of the Connection"
          },
          "server_data": {
            "type": "string",
            "readOnly": true,
            "description": "Data assigned to the Connection in your application's server-side when creating the Connection"
          },
          "client_data": {
            "type": "string",
            "readOnly": true,
            "nullable": true,
            "description": "Data assigned to the Connection in your application's client-side when calling Session.connect"
          },
          "role": {
            "type": "string",
            "default": "PUBLISHER",
            "enum": [
              "SUBSCRIBER",
              "PUBLISHER",
              "MODERATOR"
            ],
            "description": "Defines the role of the Connection"
          },
          "publishers": {
            "type": "array",
            "readOnly": true,
            "nullable": true,
            "description": "Streams the Connection is currently publishing",
            "items": {
              "$ref": "#/components/schemas/Publisher"
            }
          },
          "subscribers": {
            "type": "array",
            "readOnly": true,
            "nullable": true,
            "description": "Streams the user is currently subscribed to",
            "items": {
              "$ref": "#/components/schemas/Subscriber"
            }
          },
          "kurento_options": {
            "nullable": true,
            "description": "Configuration properties for the Connection regarding Kurento",
            "allOf": [
              {
                "$ref": "#/components/schemas/KurentoOptions"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "SessionResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true,
            "description": "Identifier of the session"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Time when the session was created"
          },
          "media_mode": {
            "type": "string",
            "enum": [
              "ROUTED",
              "RELAYED"
            ],
            "description": "Media mode configured for the session"
          },
          "recording_mode": {
            "type": "string",
            "enum": [
              "MANUAL",
              "ALWAYS"
            ],
            "description": "Recording mode configured for the session"
          },
          "default_recording_properties": {
            "nullable": true,
            "description": "The recording properties to apply by default to any recording started for this Session",
            "allOf": [
              {
                "$ref": "#/components/schemas/DefaultRecordingPropertiesResponse"
              }
            ]
          },
          "custom_session_id": {
            "type": "string",
            "nullable": true,
            "description": "Custom session identifier"
          },
          "active_connections": {
            "type": "array",
            "readOnly": true,
            "description": "Collection of active connections in the session",
            "items": {
              "$ref": "#/components/schemas/WebRtcConnection"
            }
          },
          "recording": {
            "type": "boolean",
            "readOnly": true,
            "description": "Whether the session is being recorded or not at this moment"
          },
          "forced_media_codec": {
            "type": "string",
            "enum": [
              "VP8",
              "H264",
              "NONE"
            ],
            "description": "Ensure that all the browsers use the same codec, avoiding transcoding process in the media server, which result in a reduce of CPU usage."
          },
          "allow_transcoding": {
            "type": "boolean",
            "description": "Defines if transcoding is allowed or not when forcedVideoCodec is not a compatible codec with the browser"
          }
        },
        "additionalProperties": false
      },
      "DefaultRecordingPropertiesCreation": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "default": null,
            "nullable": true,
            "description": "Name of the Recording"
          },
          "output_mode": {
            "type": "string",
            "default": "COMPOSED",
            "enum": [
              "COMPOSED",
              "INDIVIDUAL",
              "COMPOSED_QUICK_START"
            ],
            "description": "Output mode of the Recording"
          },
          "has_audio": {
            "type": "boolean",
            "default": true,
            "description": "True if the Recording includes an audio track, false otherwise"
          },
          "has_video": {
            "type": "boolean",
            "default": true,
            "description": "True if the Recording includes a video track, false otherwise"
          },
          "recording_layout": {
            "type": "string",
            "default": "BEST_FIT",
            "enum": [
              "BEST_FIT",
              "CUSTOM"
            ],
            "description": "The recording layout that is being used"
          },
          "resolution": {
            "type": "string",
            "default": "1280x720",
            "description": "Resolution of the video file"
          },
          "frame_rate": {
            "type": "integer",
            "default": 30,
            "minimum": 1,
            "maximum": 120,
            "description": "Frame rate of the video file"
          },
          "shmSize": {
            "type": "integer",
            "default": 536870912,
            "writeOnly": true,
            "description": "The amount of memory dedicated to the recording module in charge of this specific recording, in bytes"
          }
        },
        "additionalProperties": false
      },
      "SessionCreation": {
        "type": "object",
        "properties": {
          "media_mode": {
            "type": "string",
            "default": "ROUTED",
            "enum": [
              "ROUTED",
              "RELAYED"
            ],
            "description": "Media mode configured for the session"
          },
          "recording_mode": {
            "type": "string",
            "default": "MANUAL",
            "enum": [
              "MANUAL",
              "ALWAYS"
            ],
            "description": "Recording mode configured for the session"
          },
          "default_recording_properties": {
            "default": null,
            "nullable": true,
            "description": "The recording properties to apply by default to any recording started for this Session",
            "allOf": [
              {
                "$ref": "#/components/schemas/DefaultRecordingPropertiesCreation"
              }
            ]
          },
          "custom_session_id": {
            "type": "string",
            "default": null,
            "nullable": true,
            "description": "Custom session identifier"
          },
          "forced_media_codec": {
            "type": "string",
            "default": "VP8",
            "enum": [
              "VP8",
              "H264",
              "NONE"
            ],
            "description": "Ensure that all the browsers use the same codec, avoiding transcoding process in the media server, which result in a reduce of CPU usage."
          },
          "allow_transcoding": {
            "type": "boolean",
            "default": false,
            "description": "Defines if transcoding is allowed or not when forcedVideoCodec is not a compatible codec with the browser"
          }
        },
        "additionalProperties": false
      },
      "SignalCreation": {
        "type": "object",
        "properties": {
          "to": {
            "type": "array",
            "description": "List of connection identifiers to which to send the signal. If this property is not included or is an empty array, the signal will be sent to all participants of the session",
            "items": {
              "type": "string"
            }
          },
          "type": {
            "type": "string",
            "description": "Type of the signal"
          },
          "data": {
            "type": "string",
            "description": "Actual data of the signal"
          }
        },
        "additionalProperties": false
      },
      "KurentoOptionsResponse": {
        "type": "object",
        "properties": {
          "video_max_recv_bandwith": {
            "type": "integer",
            "description": "Maximum video bandwidth sent from clients to OpenVidu Server, in kbps. 0 means unconstrained"
          },
          "video_max_send_bandwith": {
            "type": "integer",
            "description": "Maximum video bandwidth sent from OpenVidu Server to clients, in kbps. 0 means unconstrained"
          },
          "video_min_recv_bandwith": {
            "type": "integer",
            "description": "Minimum video bandwidth sent from clients to OpenVidu Server, in kbps. 0 means unconstrained"
          },
          "video_min_send_bandwith": {
            "type": "integer",
            "description": "Minimum video bandwidth sent from OpenVidu Server to clients, in kbps. 0 means unconstrained"
          },
          "allowed_filters": {
            "type": "array",
            "description": "Names of the filters the Connection will be able to apply to its published streams",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "WebRtcConnectionResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true,
            "description": "Identifier of the Connection"
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "active"
            ],
            "readOnly": true,
            "description": "Status of the Connection"
          },
          "session_id": {
            "type": "string",
            "readOnly": true,
            "description": "Identifier of the Session to which the user is connected"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Time when the connection was created"
          },
          "active_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true,
            "description": "Time when the Connection was taken by a user by calling method Session.connect with the Connection's token property"
          },
          "platform": {
            "type": "string",
            "readOnly": true,
            "nullable": true,
            "description": "Complete description of the platform used by the participant to connect to the Session"
          },
          "token": {
            "type": "string",
            "readOnly": true,
            "description": "Token of the Connection"
          },
          "server_data": {
            "type": "string",
            "readOnly": true,
            "description": "Data assigned to the Connection in your application's server-side when creating the Connection"
          },
          "client_data": {
            "type": "string",
            "readOnly": true,
            "nullable": true,
            "description": "Data assigned to the Connection in your application's client-side when calling Session.connect"
          },
          "role": {
            "type": "string",
            "enum": [
              "SUBSCRIBER",
              "PUBLISHER",
              "MODERATOR"
            ],
            "description": "Defines the role of the Connection"
          },
          "publishers": {
            "type": "array",
            "readOnly": true,
            "nullable": true,
            "description": "Streams the Connection is currently publishing",
            "items": {
              "$ref": "#/components/schemas/Publisher"
            }
          },
          "subscribers": {
            "type": "array",
            "readOnly": true,
            "nullable": true,
            "description": "Streams the user is currently subscribed to",
            "items": {
              "$ref": "#/components/schemas/Subscriber"
            }
          },
          "kurento_options": {
            "nullable": true,
            "description": "Configuration properties for the Connection regarding Kurento",
            "allOf": [
              {
                "$ref": "#/components/schemas/KurentoOptionsResponse"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "KurentoOptionsCreation": {
        "type": "object",
        "properties": {
          "video_max_recv_bandwith": {
            "type": "integer",
            "description": "Maximum video bandwidth sent from clients to OpenVidu Server, in kbps. 0 means unconstrained"
          },
          "video_max_send_bandwith": {
            "type": "integer",
            "description": "Maximum video bandwidth sent from OpenVidu Server to clients, in kbps. 0 means unconstrained"
          },
          "video_min_recv_bandwith": {
            "type": "integer",
            "description": "Minimum video bandwidth sent from clients to OpenVidu Server, in kbps. 0 means unconstrained"
          },
          "video_min_send_bandwith": {
            "type": "integer",
            "description": "Minimum video bandwidth sent from OpenVidu Server to clients, in kbps. 0 means unconstrained"
          },
          "allowed_filters": {
            "type": "array",
            "description": "Names of the filters the Connection will be able to apply to its published streams",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "WebRtcConnectionCreation": {
        "type": "object",
        "properties": {
          "data": {
            "type": "string",
            "writeOnly": true,
            "description": "Metadata associated to this Connection. This populates property `server_data` of the Connection object"
          },
          "role": {
            "type": "string",
            "default": "PUBLISHER",
            "enum": [
              "SUBSCRIBER",
              "PUBLISHER",
              "MODERATOR"
            ],
            "description": "Defines the role of the Connection"
          },
          "kurento_options": {
            "nullable": true,
            "description": "Configuration properties for the Connection regarding Kurento",
            "allOf": [
              {
                "$ref": "#/components/schemas/KurentoOptionsCreation"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "RecordingResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true,
            "description": "Name of the Recording"
          },
          "output_mode": {
            "type": "string",
            "enum": [
              "COMPOSED",
              "INDIVIDUAL",
              "COMPOSED_QUICK_START"
            ],
            "description": "Output mode of the Recording"
          },
          "has_audio": {
            "type": "boolean",
            "description": "True if the Recording includes an audio track, false otherwise"
          },
          "has_video": {
            "type": "boolean",
            "description": "True if the Recording includes a video track, false otherwise"
          },
          "recording_layout": {
            "type": "string",
            "enum": [
              "BEST_FIT",
              "CUSTOM"
            ],
            "description": "The recording layout that is being used"
          },
          "resolution": {
            "type": "string",
            "description": "Resolution of the video file"
          },
          "frame_rate": {
            "type": "integer",
            "minimum": 1,
            "maximum": 120,
            "description": "Frame rate of the video file"
          },
          "id": {
            "type": "string",
            "readOnly": true,
            "description": "Identifier of the Recording"
          },
          "ignore_failed_streams": {
            "type": "boolean",
            "description": "Whether to ignore failed streams or not when starting the recording"
          },
          "session_id": {
            "type": "string",
            "readOnly": true,
            "description": "Session associated to the Recording"
          },
          "custom_layout": {
            "type": "string",
            "nullable": true,
            "description": "The custom layout that is being used"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Time when the recording started"
          },
          "size": {
            "type": "integer",
            "readOnly": true,
            "nullable": true,
            "description": "Size in bytes of the video file. Only guaranteed to be greater than 0 if status is `ready`"
          },
          "duration": {
            "type": "integer",
            "readOnly": true,
            "nullable": true,
            "description": "Duration of the video file in seconds. Only guaranteed to be greater than 0 if status is `ready`"
          },
          "url": {
            "type": "string",
            "readOnly": true,
            "nullable": true,
            "description": "URL where the Recording file is available. Only guaranteed to be set if status is `ready`"
          },
          "status": {
            "type": "string",
            "enum": [
              "starting",
              "started",
              "stopped",
              "ready",
              "failed"
            ],
            "readOnly": true,
            "description": "Status of the Recording"
          }
        },
        "additionalProperties": false
      },
      "RecordingCreation": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "default": null,
            "nullable": true,
            "description": "Name of the Recording"
          },
          "output_mode": {
            "type": "string",
            "default": "COMPOSED",
            "enum": [
              "COMPOSED",
              "INDIVIDUAL",
              "COMPOSED_QUICK_START"
            ],
            "description": "Output mode of the Recording"
          },
          "has_audio": {
            "type": "boolean",
            "default": true,
            "description": "True if the Recording includes an audio track, false otherwise"
          },
          "has_video": {
            "type": "boolean",
            "default": true,
            "description": "True if the Recording includes a video track, false otherwise"
          },
          "recording_layout": {
            "type": "string",
            "default": "BEST_FIT",
            "enum": [
              "BEST_FIT",
              "CUSTOM"
            ],
            "description": "The recording layout that is being used"
          },
          "resolution": {
            "type": "string",
            "default": "1280x720",
            "description": "Resolution of the video file"
          },
          "frame_rate": {
            "type": "integer",
            "default": 30,
            "minimum": 1,
            "maximum": 120,
            "description": "Frame rate of the video file"
          },
          "shmSize": {
            "type": "integer",
            "default": 536870912,
            "writeOnly": true,
            "description": "The amount of memory dedicated to the recording module in charge of this specific recording, in bytes"
          },
          "ignore_failed_streams": {
            "type": "boolean",
            "default": false,
            "description": "Whether to ignore failed streams or not when starting the recording"
          },
          "custom_layout": {
            "type": "string",
            "default": null,
            "nullable": true,
            "description": "The custom layout that is being used"
          }
        },
        "additionalProperties": false
      },
      "RoomResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "Unique ID that identifies this entity"
          },
          "date_created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Server time at which this entity was created"
          },
          "date_modified": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true,
            "description": "Server time when this entity was last modified"
          },
          "layout_id": {
            "type": "integer",
            "description": "Layout for this room"
          },
          "openvidu_session_id": {
            "type": "string",
            "description": "Session for OpenVidu"
          }
        },
        "additionalProperties": false
      },
      "RoomCreation": {
        "type": "object",
        "properties": {
          "layout_id": {
            "type": "integer",
            "description": "Layout for this room"
          },
          "openvidu_session_id": {
            "type": "string",
            "description": "Session for OpenVidu"
          }
        },
        "required": [
          "layout_id"
        ],
        "additionalProperties": false
      },
      "RoomUpdate": {
        "type": "object",
        "properties": {
          "layout_id": {
            "type": "integer",
            "description": "Layout for this room"
          },
          "openvidu_session_id": {
            "type": "string",
            "description": "Session for OpenVidu"
          }
        },
        "additionalProperties": false
      },
      "UserResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "Unique ID that identifies this entity"
          },
          "date_created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Server time at which this entity was created"
          },
          "date_modified": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true,
            "description": "Server time when this entity was last modified"
          },
          "name": {
            "type": "string",
            "description": "Name of the user"
          },
          "session_id": {
            "type": "string",
            "readOnly": true,
            "description": "SocketIO session ID for this user"
          }
        },
        "additionalProperties": false
      },
      "LogResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "Unique ID that identifies this entity"
          },
          "date_created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Server time at which this entity was created"
          },
          "date_modified": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true,
            "description": "Server time when this entity was last modified"
          },
          "event": {
            "type": "string",
            "description": "The event associated with this log entry"
          },
          "user_id": {
            "type": "integer",
            "nullable": true,
            "description": "Source user for this log entry"
          },
          "room_id": {
            "type": "integer",
            "nullable": true,
            "description": "Source room for this log entry"
          },
          "receiver_id": {
            "type": "integer",
            "nullable": true,
            "description": "Receiver associated  with this log entry"
          },
          "data": {
            "type": "object",
            "description": "Data stored inside this log entry"
          }
        },
        "additionalProperties": false
      },
      "Attribute": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "The value to be set for the given attribute"
          },
          "attribute": {
            "type": "string",
            "description": "The attribute to be updated"
          }
        },
        "required": [
          "attribute",
          "value"
        ]
      },
      "Text": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "description": "The text to be set for the given ID"
          }
        },
        "required": [
          "text"
        ]
      },
      "Class": {
        "type": "object",
        "properties": {
          "class": {
            "type": "string",
            "description": "The class to be modified"
          }
        },
        "required": [
          "class"
        ]
      },
      "PermissionsResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "Unique ID that identifies this entity"
          },
          "date_created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Server time at which this entity was created"
          },
          "date_modified": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true,
            "description": "Server time when this entity was last modified"
          },
          "api": {
            "type": "boolean",
            "description": "Permit API calls"
          },
          "send_message": {
            "type": "boolean",
            "description": "Permit sending plain messages"
          },
          "send_html_message": {
            "type": "boolean",
            "description": "Permit sending html messages. Be careful with this permission as it allows to send any html content!"
          },
          "send_image": {
            "type": "boolean",
            "description": "Permit sending images"
          },
          "send_command": {
            "type": "boolean",
            "description": "Permit sending commands"
          },
          "send_privately": {
            "type": "boolean",
            "description": "Permit sending privately. This has to be combined with any other `\"send_*\"` permission"
          },
          "broadcast": {
            "type": "boolean",
            "description": "Permit broadcasting messages"
          },
          "openvidu_role": {
            "type": "string",
            "enum": [
              "SUBSCRIBER",
              "PUBLISHER",
              "MODERATOR"
            ],
            "nullable": true,
            "description": "Role for OpenVidu"
          }
        },
        "additionalProperties": false
      },
      "PermissionsCreation": {
        "type": "object",
        "properties": {
          "api": {
            "type": "boolean",
            "default": false,
            "description": "Permit API calls"
          },
          "send_message": {
            "type": "boolean",
            "default": false,
            "description": "Permit sending plain messages"
          },
          "send_html_message": {
            "type": "boolean",
            "default": false,
            "description": "Permit sending html messages. Be careful with this permission as it allows to send any html content!"
          },
          "send_image": {
            "type": "boolean",
            "default": false,
            "description": "Permit sending images"
          },
          "send_command": {
            "type": "boolean",
            "default": false,
            "description": "Permit sending commands"
          },
          "send_privately": {
            "type": "boolean",
            "default": false,
            "description": "Permit sending privately. This has to be combined with any other `\"send_*\"` permission"
          },
          "broadcast": {
            "type": "boolean",
            "default": false,
            "description": "Permit broadcasting messages"
          },
          "openvidu_role": {
            "type": "string",
            "default": null,
            "enum": [
              "SUBSCRIBER",
              "PUBLISHER",
              "MODERATOR"
            ],
            "nullable": true,
            "description": "Role for OpenVidu"
          }
        },
        "additionalProperties": false
      },
      "PermissionsUpdate": {
        "type": "object",
        "properties": {
          "api": {
            "type": "boolean",
            "description": "Permit API calls"
          },
          "send_message": {
            "type": "boolean",
            "description": "Permit sending plain messages"
          },
          "send_html_message": {
            "type": "boolean",
            "description": "Permit sending html messages. Be careful with this permission as it allows to send any html content!"
          },
          "send_image": {
            "type": "boolean",
            "description": "Permit sending images"
          },
          "send_command": {
            "type": "boolean",
            "description": "Permit sending commands"
          },
          "send_privately": {
            "type": "boolean",
            "description": "Permit sending privately. This has to be combined with any other `\"send_*\"` permission"
          },
          "broadcast": {
            "type": "boolean",
            "description": "Permit broadcasting messages"
          },
          "openvidu_role": {
            "type": "string",
            "enum": [
              "SUBSCRIBER",
              "PUBLISHER",
              "MODERATOR"
            ],
            "nullable": true,
            "description": "Role for OpenVidu"
          }
        },
        "additionalProperties": false
      },
      "OpenViduSettingsResponse": {
        "type": "object",
        "properties": {
          "start_with_audio": {
            "type": "boolean",
            "description": "Start audio on joining the room"
          },
          "start_with_video": {
            "type": "boolean",
            "description": "Start video on joining the room"
          },
          "video_resolution": {
            "type": "string",
            "description": "Video resolution"
          },
          "video_framerate": {
            "type": "integer",
            "description": "Framerate for video"
          },
          "video_min_recv_bandwidth": {
            "type": "integer",
            "description": "Minimum video bandwidth sent from clients to OpenVidu Server, in kbps. 0 means unconstrained"
          },
          "video_max_recv_bandwidth": {
            "type": "integer",
            "description": "Maximum video bandwidth sent from clients to OpenVidu Server, in kbps. 0 means unconstrained"
          },
          "video_min_send_bandwidth": {
            "type": "integer",
            "description": "Minimum video bandwidth sent from OpenVidu Server to clients, in kbps. 0 means unconstrained"
          },
          "video_max_send_bandwidth": {
            "type": "integer",
            "description": "Maximum video bandwidth sent from OpenVidu Server to clients, in kbps. 0 means unconstrained"
          },
          "video_publisher_location": {
            "type": "string",
            "nullable": true,
            "description": "Corresponding id in html where publisher video is shown"
          },
          "video_subscribers_location": {
            "type": "string",
            "nullable": true,
            "description": "Corresponding id in html where subscribed videos are shown"
          },
          "allowed_filters": {
            "type": "array",
            "description": "Names of the filters the Connection will be able to apply to its published streams",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "TokenResponse": {
        "type": "object",
        "properties": {
          "date_created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Server time at which this entity was created"
          },
          "date_modified": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true,
            "description": "Server time when this entity was last modified"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true,
            "description": "Unique ID that identifies this entity"
          },
          "permissions_id": {
            "type": "integer",
            "description": "Permissions for this token"
          },
          "registrations_left": {
            "type": "integer",
            "minimum": -1,
            "maximum": 9223372036854775807,
            "description": "Logins left for this token"
          },
          "room_id": {
            "type": "integer",
            "nullable": true,
            "description": "Room assigned to this token"
          },
          "task_id": {
            "type": "integer",
            "nullable": true,
            "description": "Task assigned to this token"
          },
          "openvidu_settings": {
            "description": "Settings for connections used for this token. If a setting is missing, the room default is used",
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenViduSettingsResponse"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "OpenViduSettingsCreation": {
        "type": "object",
        "properties": {
          "start_with_audio": {
            "type": "boolean",
            "description": "Start audio on joining the room"
          },
          "start_with_video": {
            "type": "boolean",
            "description": "Start video on joining the room"
          },
          "video_resolution": {
            "type": "string",
            "description": "Video resolution"
          },
          "video_framerate": {
            "type": "integer",
            "description": "Framerate for video"
          },
          "video_min_recv_bandwidth": {
            "type": "integer",
            "description": "Minimum video bandwidth sent from clients to OpenVidu Server, in kbps. 0 means unconstrained"
          },
          "video_max_recv_bandwidth": {
            "type": "integer",
            "description": "Maximum video bandwidth sent from clients to OpenVidu Server, in kbps. 0 means unconstrained"
          },
          "video_min_send_bandwidth": {
            "type": "integer",
            "description": "Minimum video bandwidth sent from OpenVidu Server to clients, in kbps. 0 means unconstrained"
          },
          "video_max_send_bandwidth": {
            "type": "integer",
            "description": "Maximum video bandwidth sent from OpenVidu Server to clients, in kbps. 0 means unconstrained"
          },
          "video_publisher_location": {
            "type": "string",
            "nullable": true,
            "description": "Corresponding id in html where publisher video is shown"
          },
          "video_subscribers_location": {
            "type": "string",
            "nullable": true,
            "description": "Corresponding id in html where subscribed videos are shown"
          },
          "allowed_filters": {
            "type": "array",
            "description": "Names of the filters the Connection will be able to apply to its published streams",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "TokenCreation": {
        "type": "object",
        "properties": {
          "permissions_id": {
            "type": "integer",
            "description": "Permissions for this token"
          },
          "registrations_left": {
            "type": "integer",
            "default": 1,
            "minimum": -1,
            "maximum": 9223372036854775807,
            "description": "Logins left for this token"
          },
          "room_id": {
            "type": "integer",
            "default": null,
            "nullable": true,
            "description": "Room assigned to this token"
          },
          "task_id": {
            "type": "integer",
            "default": null,
            "nullable": true,
            "description": "Task assigned to this token"
          },
          "openvidu_settings": {
            "default": {},
            "description": "Settings for connections used for this token. If a setting is missing, the room default is used",
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenViduSettingsCreation"
              }
            ]
          }
        },
        "required": [
          "permissions_id"
        ],
        "additionalProperties": false
      },
      "OpenViduSettingsUpdate": {
        "type": "object",
        "properties": {
          "start_with_audio": {
            "type": "boolean",
            "description": "Start audio on joining the room"
          },
          "start_with_video": {
            "type": "boolean",
            "description": "Start video on joining the room"
          },
          "video_resolution": {
            "type": "string",
            "description": "Video resolution"
          },
          "video_framerate": {
            "type": "integer",
            "description": "Framerate for video"
          },
          "video_min_recv_bandwidth": {
            "type": "integer",
            "description": "Minimum video bandwidth sent from clients to OpenVidu Server, in kbps. 0 means unconstrained"
          },
          "video_max_recv_bandwidth": {
            "type": "integer",
            "description": "Maximum video bandwidth sent from clients to OpenVidu Server, in kbps. 0 means unconstrained"
          },
          "video_min_send_bandwidth": {
            "type": "integer",
            "description": "Minimum video bandwidth sent from OpenVidu Server to clients, in kbps. 0 means unconstrained"
          },
          "video_max_send_bandwidth": {
            "type": "integer",
            "description": "Maximum video bandwidth sent from OpenVidu Server to clients, in kbps. 0 means unconstrained"
          },
          "video_publisher_location": {
            "type": "string",
            "nullable": true,
            "description": "Corresponding id in html where publisher video is shown"
          },
          "video_subscribers_location": {
            "type": "string",
            "nullable": true,
            "description": "Corresponding id in html where subscribed videos are shown"
          },
          "allowed_filters": {
            "type": "array",
            "description": "Names of the filters the Connection will be able to apply to its published streams",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "TokenUpdate": {
        "type": "object",
        "properties": {
          "permissions_id": {
            "type": "integer",
            "description": "Permissions for this token"
          },
          "registrations_left": {
            "type": "integer",
            "minimum": -1,
            "maximum": 9223372036854775807,
            "description": "Logins left for this token"
          },
          "room_id": {
            "type": "integer",
            "nullable": true,
            "description": "Room assigned to this token"
          },
          "task_id": {
            "type": "integer",
            "nullable": true,
            "description": "Task assigned to this token"
          },
          "openvidu_settings": {
            "description": "Settings for connections used for this token. If a setting is missing, the room default is used",
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenViduSettingsUpdate"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "UserCreation": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the user"
          },
          "token_id": {
            "type": "string",
            "format": "uuid",
            "writeOnly": true,
            "description": "Token associated with this user"
          }
        },
        "required": [
          "name",
          "token_id"
        ],
        "additionalProperties": false
      },
      "UserUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the user"
          },
          "token_id": {
            "type": "string",
            "format": "uuid",
            "writeOnly": true,
            "description": "Token associated with this user"
          }
        },
        "additionalProperties": false
      },
      "TaskResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "Unique ID that identifies this entity"
          },
          "date_created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Server time at which this entity was created"
          },
          "date_modified": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true,
            "description": "Server time when this entity was last modified"
          },
          "name": {
            "type": "string",
            "description": "Name of the task"
          },
          "num_users": {
            "type": "integer",
            "minimum": 0,
            "maximum": 9223372036854775807,
            "description": "Number of users needed for this task"
          },
          "layout_id": {
            "type": "integer",
            "description": "Layout for this task"
          }
        },
        "additionalProperties": false
      },
      "TaskCreation": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the task"
          },
          "num_users": {
            "type": "integer",
            "minimum": 0,
            "maximum": 9223372036854775807,
            "description": "Number of users needed for this task"
          },
          "layout_id": {
            "type": "integer",
            "description": "Layout for this task"
          }
        },
        "required": [
          "layout_id",
          "name",
          "num_users"
        ],
        "additionalProperties": false
      },
      "TaskUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the task"
          },
          "num_users": {
            "type": "integer",
            "minimum": 0,
            "maximum": 9223372036854775807,
            "description": "Number of users needed for this task"
          },
          "layout_id": {
            "type": "integer",
            "description": "Layout for this task"
          }
        },
        "additionalProperties": false
      },
      "LogCreation": {
        "type": "object",
        "properties": {
          "event": {
            "type": "string",
            "description": "The event associated with this log entry"
          },
          "user_id": {
            "type": "integer",
            "default": null,
            "nullable": true,
            "description": "Source user for this log entry"
          },
          "room_id": {
            "type": "integer",
            "default": null,
            "nullable": true,
            "description": "Source room for this log entry"
          },
          "receiver_id": {
            "type": "integer",
            "default": null,
            "nullable": true,
            "description": "Receiver associated  with this log entry"
          },
          "data": {
            "type": "object",
            "default": {},
            "description": "Data stored inside this log entry"
          }
        },
        "required": [
          "event"
        ],
        "additionalProperties": false
      },
      "LogUpdate": {
        "type": "object",
        "properties": {
          "event": {
            "type": "string",
            "description": "The event associated with this log entry"
          },
          "user_id": {
            "type": "integer",
            "nullable": true,
            "description": "Source user for this log entry"
          },
          "room_id": {
            "type": "integer",
            "nullable": true,
            "description": "Source room for this log entry"
          },
          "receiver_id": {
            "type": "integer",
            "nullable": true,
            "description": "Receiver associated  with this log entry"
          },
          "data": {
            "type": "object",
            "description": "Data stored inside this log entry"
          }
        },
        "additionalProperties": false
      }
    },
    "responses": {
      "UNPROCESSABLE_ENTITY": {
        "description": "Unprocessable Entity",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "UNSUPPORTED_MEDIA_TYPE": {
        "description": "Unsupported Media Type",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "NOT_MODIFIED": {
        "description": "Not Modified"
      },
      "UNAUTHORIZED": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "NOT_FOUND": {
        "description": "Not Found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "PRECONDITION_FAILED": {
        "description": "Precondition Failed",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "PRECONDITION_REQUIRED": {
        "description": "Precondition Required",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "TokenAuthentication": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}
